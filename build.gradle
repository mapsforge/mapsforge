buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

allprojects {
    group = 'org.mapsforge'
    version = 'master-SNAPSHOT'
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    ext.androidBuildVersionTools = "30.0.2"
    ext.jUnitVersion = "4.12"

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
            logging.captureStandardError LogLevel.INFO
            logging.captureStandardOutput LogLevel.INFO
        }
    }
}

static def androidCompileSdk() { return 30 }

// 14 for Support Library, 16 for sqlite-android
static def androidMinSdk() { return 16 }

static def androidTargetSdk() { return 30 }

static def versionCode() { return 1 }

def versionName() { return version }

subprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava9Compatible()) {
            // source and target 7 is insufficient with some seemingly compatible API extensions in ByteBuffer,
            // causing builds that happen on a current SDK to be incompatible with actual old java (despite compiling fine)
            // see https://github.com/gradle/gradle/issues/2510
            if (project.properties.containsKey('android')) {
                logger.debug("has android, skipping injection of --release=7 in {} -> {}", it.project.name, it.name)
            } else {
                def ver = '7'
                if(project.name=='mapsforge-map-writer' || project.name=='mapsforge-poi-writer') {
                    // guava JRE actually requires 1.8. Surely acceptable for the writers,
                    // but it means that we can't compile with --release 7
                    logger.lifecycle("guava in {} -> {} {}", it.project.name, it.name, project.dependencies)
                    ver = '8'
                }
                logger.lifecycle("setting --release {} in {} -> {}", ver, it.project.name, it.name)
                options.compilerArgs << '--release' << ver
            }
        }
    }
}
